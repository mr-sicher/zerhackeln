/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package parktikum.laden;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-17")
public class Laden {

    public interface Iface {

        public double add(String costumer, String article, int amount) throws org.apache.thrift.TException;

        public double getPrice(String article) throws org.apache.thrift.TException;

        public double getPriceFor(String article, int amount) throws org.apache.thrift.TException;

        public List<String> getOrders(String costumer) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void add(String costumer, String article, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getPrice(String article, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getPriceFor(String article, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getOrders(String costumer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public double add(String costumer, String article, int amount) throws org.apache.thrift.TException
        {
            send_add(costumer, article, amount);
            return recv_add();
        }

        public void send_add(String costumer, String article, int amount) throws org.apache.thrift.TException
        {
            add_args args = new add_args();
            args.setCostumer(costumer);
            args.setArticle(article);
            args.setAmount(amount);
            sendBase("add", args);
        }

        public double recv_add() throws org.apache.thrift.TException
        {
            add_result result = new add_result();
            receiveBase(result, "add");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add failed: unknown result");
        }

        public double getPrice(String article) throws org.apache.thrift.TException
        {
            send_getPrice(article);
            return recv_getPrice();
        }

        public void send_getPrice(String article) throws org.apache.thrift.TException
        {
            getPrice_args args = new getPrice_args();
            args.setArticle(article);
            sendBase("getPrice", args);
        }

        public double recv_getPrice() throws org.apache.thrift.TException
        {
            getPrice_result result = new getPrice_result();
            receiveBase(result, "getPrice");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrice failed: unknown result");
        }

        public double getPriceFor(String article, int amount) throws org.apache.thrift.TException
        {
            send_getPriceFor(article, amount);
            return recv_getPriceFor();
        }

        public void send_getPriceFor(String article, int amount) throws org.apache.thrift.TException
        {
            getPriceFor_args args = new getPriceFor_args();
            args.setArticle(article);
            args.setAmount(amount);
            sendBase("getPriceFor", args);
        }

        public double recv_getPriceFor() throws org.apache.thrift.TException
        {
            getPriceFor_result result = new getPriceFor_result();
            receiveBase(result, "getPriceFor");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPriceFor failed: unknown result");
        }

        public List<String> getOrders(String costumer) throws org.apache.thrift.TException
        {
            send_getOrders(costumer);
            return recv_getOrders();
        }

        public void send_getOrders(String costumer) throws org.apache.thrift.TException
        {
            getOrders_args args = new getOrders_args();
            args.setCostumer(costumer);
            sendBase("getOrders", args);
        }

        public List<String> recv_getOrders() throws org.apache.thrift.TException
        {
            getOrders_result result = new getOrders_result();
            receiveBase(result, "getOrders");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrders failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void add(String costumer, String article, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            add_call method_call = new add_call(costumer, article, amount, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class add_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String costumer;
            private String article;
            private int amount;
            public add_call(String costumer, String article, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.costumer = costumer;
                this.article = article;
                this.amount = amount;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.CALL, 0));
                add_args args = new add_args();
                args.setCostumer(costumer);
                args.setArticle(article);
                args.setAmount(amount);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public double getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_add();
            }
        }

        public void getPrice(String article, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPrice_call method_call = new getPrice_call(article, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPrice_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String article;
            public getPrice_call(String article, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.article = article;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrice", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPrice_args args = new getPrice_args();
                args.setArticle(article);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public double getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPrice();
            }
        }

        public void getPriceFor(String article, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPriceFor_call method_call = new getPriceFor_call(article, amount, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPriceFor_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String article;
            private int amount;
            public getPriceFor_call(String article, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.article = article;
                this.amount = amount;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPriceFor", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPriceFor_args args = new getPriceFor_args();
                args.setArticle(article);
                args.setAmount(amount);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public double getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPriceFor();
            }
        }

        public void getOrders(String costumer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getOrders_call method_call = new getOrders_call(costumer, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getOrders_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String costumer;
            public getOrders_call(String costumer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.costumer = costumer;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrders", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getOrders_args args = new getOrders_args();
                args.setCostumer(costumer);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getOrders();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("add", new add());
            processMap.put("getPrice", new getPrice());
            processMap.put("getPriceFor", new getPriceFor());
            processMap.put("getOrders", new getOrders());
            return processMap;
        }

        public static class add<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_args> {
            public add() {
                super("add");
            }

            public add_args getEmptyArgsInstance() {
                return new add_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public add_result getResult(I iface, add_args args) throws org.apache.thrift.TException {
                add_result result = new add_result();
                result.success = iface.add(args.costumer, args.article, args.amount);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getPrice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrice_args> {
            public getPrice() {
                super("getPrice");
            }

            public getPrice_args getEmptyArgsInstance() {
                return new getPrice_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPrice_result getResult(I iface, getPrice_args args) throws org.apache.thrift.TException {
                getPrice_result result = new getPrice_result();
                result.success = iface.getPrice(args.article);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getPriceFor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPriceFor_args> {
            public getPriceFor() {
                super("getPriceFor");
            }

            public getPriceFor_args getEmptyArgsInstance() {
                return new getPriceFor_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPriceFor_result getResult(I iface, getPriceFor_args args) throws org.apache.thrift.TException {
                getPriceFor_result result = new getPriceFor_result();
                result.success = iface.getPriceFor(args.article, args.amount);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getOrders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrders_args> {
            public getOrders() {
                super("getOrders");
            }

            public getOrders_args getEmptyArgsInstance() {
                return new getOrders_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getOrders_result getResult(I iface, getOrders_args args) throws org.apache.thrift.TException {
                getOrders_result result = new getOrders_result();
                result.success = iface.getOrders(args.costumer);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("add", new add());
            processMap.put("getPrice", new getPrice());
            processMap.put("getPriceFor", new getPriceFor());
            processMap.put("getOrders", new getOrders());
            return processMap;
        }

        public static class add<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, add_args, Double> {
            public add() {
                super("add");
            }

            public add_args getEmptyArgsInstance() {
                return new add_args();
            }

            public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Double>() {
                    public void onComplete(Double o) {
                        add_result result = new add_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        add_result result = new add_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, add_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
                iface.add(args.costumer, args.article, args.amount,resultHandler);
            }
        }

        public static class getPrice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPrice_args, Double> {
            public getPrice() {
                super("getPrice");
            }

            public getPrice_args getEmptyArgsInstance() {
                return new getPrice_args();
            }

            public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Double>() {
                    public void onComplete(Double o) {
                        getPrice_result result = new getPrice_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getPrice_result result = new getPrice_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPrice_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
                iface.getPrice(args.article,resultHandler);
            }
        }

        public static class getPriceFor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPriceFor_args, Double> {
            public getPriceFor() {
                super("getPriceFor");
            }

            public getPriceFor_args getEmptyArgsInstance() {
                return new getPriceFor_args();
            }

            public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Double>() {
                    public void onComplete(Double o) {
                        getPriceFor_result result = new getPriceFor_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getPriceFor_result result = new getPriceFor_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPriceFor_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
                iface.getPriceFor(args.article, args.amount,resultHandler);
            }
        }

        public static class getOrders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrders_args, List<String>> {
            public getOrders() {
                super("getOrders");
            }

            public getOrders_args getEmptyArgsInstance() {
                return new getOrders_args();
            }

            public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<String>>() {
                    public void onComplete(List<String> o) {
                        getOrders_result result = new getOrders_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getOrders_result result = new getOrders_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getOrders_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
                iface.getOrders(args.costumer,resultHandler);
            }
        }

    }

    public static class add_args implements org.apache.thrift.TBase<add_args, add_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_args");

        private static final org.apache.thrift.protocol.TField COSTUMER_FIELD_DESC = new org.apache.thrift.protocol.TField("costumer", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField ARTICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("article", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new add_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new add_argsTupleSchemeFactory());
        }

        public String costumer; // required
        public String article; // required
        public int amount; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COSTUMER((short)1, "costumer"),
            ARTICLE((short)2, "article"),
            AMOUNT((short)3, "amount");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COSTUMER
                        return COSTUMER;
                    case 2: // ARTICLE
                        return ARTICLE;
                    case 3: // AMOUNT
                        return AMOUNT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __AMOUNT_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COSTUMER, new org.apache.thrift.meta_data.FieldMetaData("costumer", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ARTICLE, new org.apache.thrift.meta_data.FieldMetaData("article", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_args.class, metaDataMap);
        }

        public add_args() {
        }

        public add_args(
                String costumer,
                String article,
                int amount)
        {
            this();
            this.costumer = costumer;
            this.article = article;
            this.amount = amount;
            setAmountIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public add_args(add_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCostumer()) {
                this.costumer = other.costumer;
            }
            if (other.isSetArticle()) {
                this.article = other.article;
            }
            this.amount = other.amount;
        }

        public add_args deepCopy() {
            return new add_args(this);
        }

        @Override
        public void clear() {
            this.costumer = null;
            this.article = null;
            setAmountIsSet(false);
            this.amount = 0;
        }

        public String getCostumer() {
            return this.costumer;
        }

        public add_args setCostumer(String costumer) {
            this.costumer = costumer;
            return this;
        }

        public void unsetCostumer() {
            this.costumer = null;
        }

        /** Returns true if field costumer is set (has been assigned a value) and false otherwise */
        public boolean isSetCostumer() {
            return this.costumer != null;
        }

        public void setCostumerIsSet(boolean value) {
            if (!value) {
                this.costumer = null;
            }
        }

        public String getArticle() {
            return this.article;
        }

        public add_args setArticle(String article) {
            this.article = article;
            return this;
        }

        public void unsetArticle() {
            this.article = null;
        }

        /** Returns true if field article is set (has been assigned a value) and false otherwise */
        public boolean isSetArticle() {
            return this.article != null;
        }

        public void setArticleIsSet(boolean value) {
            if (!value) {
                this.article = null;
            }
        }

        public int getAmount() {
            return this.amount;
        }

        public add_args setAmount(int amount) {
            this.amount = amount;
            setAmountIsSet(true);
            return this;
        }

        public void unsetAmount() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
        }

        /** Returns true if field amount is set (has been assigned a value) and false otherwise */
        public boolean isSetAmount() {
            return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
        }

        public void setAmountIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case COSTUMER:
                    if (value == null) {
                        unsetCostumer();
                    } else {
                        setCostumer((String)value);
                    }
                    break;

                case ARTICLE:
                    if (value == null) {
                        unsetArticle();
                    } else {
                        setArticle((String)value);
                    }
                    break;

                case AMOUNT:
                    if (value == null) {
                        unsetAmount();
                    } else {
                        setAmount((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case COSTUMER:
                    return getCostumer();

                case ARTICLE:
                    return getArticle();

                case AMOUNT:
                    return getAmount();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case COSTUMER:
                    return isSetCostumer();
                case ARTICLE:
                    return isSetArticle();
                case AMOUNT:
                    return isSetAmount();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof add_args)
                return this.equals((add_args)that);
            return false;
        }

        public boolean equals(add_args that) {
            if (that == null)
                return false;

            boolean this_present_costumer = true && this.isSetCostumer();
            boolean that_present_costumer = true && that.isSetCostumer();
            if (this_present_costumer || that_present_costumer) {
                if (!(this_present_costumer && that_present_costumer))
                    return false;
                if (!this.costumer.equals(that.costumer))
                    return false;
            }

            boolean this_present_article = true && this.isSetArticle();
            boolean that_present_article = true && that.isSetArticle();
            if (this_present_article || that_present_article) {
                if (!(this_present_article && that_present_article))
                    return false;
                if (!this.article.equals(that.article))
                    return false;
            }

            boolean this_present_amount = true;
            boolean that_present_amount = true;
            if (this_present_amount || that_present_amount) {
                if (!(this_present_amount && that_present_amount))
                    return false;
                if (this.amount != that.amount)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_costumer = true && (isSetCostumer());
            list.add(present_costumer);
            if (present_costumer)
                list.add(costumer);

            boolean present_article = true && (isSetArticle());
            list.add(present_article);
            if (present_article)
                list.add(article);

            boolean present_amount = true;
            list.add(present_amount);
            if (present_amount)
                list.add(amount);

            return list.hashCode();
        }

        @Override
        public int compareTo(add_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCostumer()).compareTo(other.isSetCostumer());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCostumer()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costumer, other.costumer);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetArticle()).compareTo(other.isSetArticle());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetArticle()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.article, other.article);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAmount()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("add_args(");
            boolean first = true;

            sb.append("costumer:");
            if (this.costumer == null) {
                sb.append("null");
            } else {
                sb.append(this.costumer);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("article:");
            if (this.article == null) {
                sb.append("null");
            } else {
                sb.append(this.article);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("amount:");
            sb.append(this.amount);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class add_argsStandardSchemeFactory implements SchemeFactory {
            public add_argsStandardScheme getScheme() {
                return new add_argsStandardScheme();
            }
        }

        private static class add_argsStandardScheme extends StandardScheme<add_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, add_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COSTUMER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.costumer = iprot.readString();
                                struct.setCostumerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ARTICLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.article = iprot.readString();
                                struct.setArticleIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // AMOUNT
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.amount = iprot.readI32();
                                struct.setAmountIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, add_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.costumer != null) {
                    oprot.writeFieldBegin(COSTUMER_FIELD_DESC);
                    oprot.writeString(struct.costumer);
                    oprot.writeFieldEnd();
                }
                if (struct.article != null) {
                    oprot.writeFieldBegin(ARTICLE_FIELD_DESC);
                    oprot.writeString(struct.article);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
                oprot.writeI32(struct.amount);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class add_argsTupleSchemeFactory implements SchemeFactory {
            public add_argsTupleScheme getScheme() {
                return new add_argsTupleScheme();
            }
        }

        private static class add_argsTupleScheme extends TupleScheme<add_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, add_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCostumer()) {
                    optionals.set(0);
                }
                if (struct.isSetArticle()) {
                    optionals.set(1);
                }
                if (struct.isSetAmount()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCostumer()) {
                    oprot.writeString(struct.costumer);
                }
                if (struct.isSetArticle()) {
                    oprot.writeString(struct.article);
                }
                if (struct.isSetAmount()) {
                    oprot.writeI32(struct.amount);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, add_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.costumer = iprot.readString();
                    struct.setCostumerIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.article = iprot.readString();
                    struct.setArticleIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.amount = iprot.readI32();
                    struct.setAmountIsSet(true);
                }
            }
        }

    }

    public static class add_result implements org.apache.thrift.TBase<add_result, add_result._Fields>, java.io.Serializable, Cloneable, Comparable<add_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new add_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new add_resultTupleSchemeFactory());
        }

        public double success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_result.class, metaDataMap);
        }

        public add_result() {
        }

        public add_result(
                double success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public add_result(add_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public add_result deepCopy() {
            return new add_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0.0;
        }

        public double getSuccess() {
            return this.success;
        }

        public add_result setSuccess(double success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Double)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof add_result)
                return this.equals((add_result)that);
            return false;
        }

        public boolean equals(add_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(add_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("add_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class add_resultStandardSchemeFactory implements SchemeFactory {
            public add_resultStandardScheme getScheme() {
                return new add_resultStandardScheme();
            }
        }

        private static class add_resultStandardScheme extends StandardScheme<add_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, add_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                                struct.success = iprot.readDouble();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, add_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeDouble(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class add_resultTupleSchemeFactory implements SchemeFactory {
            public add_resultTupleScheme getScheme() {
                return new add_resultTupleScheme();
            }
        }

        private static class add_resultTupleScheme extends TupleScheme<add_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, add_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeDouble(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, add_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readDouble();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getPrice_args implements org.apache.thrift.TBase<getPrice_args, getPrice_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPrice_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrice_args");

        private static final org.apache.thrift.protocol.TField ARTICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("article", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getPrice_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPrice_argsTupleSchemeFactory());
        }

        public String article; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ARTICLE((short)1, "article");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ARTICLE
                        return ARTICLE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ARTICLE, new org.apache.thrift.meta_data.FieldMetaData("article", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrice_args.class, metaDataMap);
        }

        public getPrice_args() {
        }

        public getPrice_args(
                String article)
        {
            this();
            this.article = article;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPrice_args(getPrice_args other) {
            if (other.isSetArticle()) {
                this.article = other.article;
            }
        }

        public getPrice_args deepCopy() {
            return new getPrice_args(this);
        }

        @Override
        public void clear() {
            this.article = null;
        }

        public String getArticle() {
            return this.article;
        }

        public getPrice_args setArticle(String article) {
            this.article = article;
            return this;
        }

        public void unsetArticle() {
            this.article = null;
        }

        /** Returns true if field article is set (has been assigned a value) and false otherwise */
        public boolean isSetArticle() {
            return this.article != null;
        }

        public void setArticleIsSet(boolean value) {
            if (!value) {
                this.article = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case ARTICLE:
                    if (value == null) {
                        unsetArticle();
                    } else {
                        setArticle((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case ARTICLE:
                    return getArticle();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case ARTICLE:
                    return isSetArticle();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPrice_args)
                return this.equals((getPrice_args)that);
            return false;
        }

        public boolean equals(getPrice_args that) {
            if (that == null)
                return false;

            boolean this_present_article = true && this.isSetArticle();
            boolean that_present_article = true && that.isSetArticle();
            if (this_present_article || that_present_article) {
                if (!(this_present_article && that_present_article))
                    return false;
                if (!this.article.equals(that.article))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_article = true && (isSetArticle());
            list.add(present_article);
            if (present_article)
                list.add(article);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPrice_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetArticle()).compareTo(other.isSetArticle());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetArticle()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.article, other.article);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPrice_args(");
            boolean first = true;

            sb.append("article:");
            if (this.article == null) {
                sb.append("null");
            } else {
                sb.append(this.article);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPrice_argsStandardSchemeFactory implements SchemeFactory {
            public getPrice_argsStandardScheme getScheme() {
                return new getPrice_argsStandardScheme();
            }
        }

        private static class getPrice_argsStandardScheme extends StandardScheme<getPrice_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPrice_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ARTICLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.article = iprot.readString();
                                struct.setArticleIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPrice_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.article != null) {
                    oprot.writeFieldBegin(ARTICLE_FIELD_DESC);
                    oprot.writeString(struct.article);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPrice_argsTupleSchemeFactory implements SchemeFactory {
            public getPrice_argsTupleScheme getScheme() {
                return new getPrice_argsTupleScheme();
            }
        }

        private static class getPrice_argsTupleScheme extends TupleScheme<getPrice_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPrice_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetArticle()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetArticle()) {
                    oprot.writeString(struct.article);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPrice_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.article = iprot.readString();
                    struct.setArticleIsSet(true);
                }
            }
        }

    }

    public static class getPrice_result implements org.apache.thrift.TBase<getPrice_result, getPrice_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPrice_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrice_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getPrice_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPrice_resultTupleSchemeFactory());
        }

        public double success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrice_result.class, metaDataMap);
        }

        public getPrice_result() {
        }

        public getPrice_result(
                double success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPrice_result(getPrice_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public getPrice_result deepCopy() {
            return new getPrice_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0.0;
        }

        public double getSuccess() {
            return this.success;
        }

        public getPrice_result setSuccess(double success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Double)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPrice_result)
                return this.equals((getPrice_result)that);
            return false;
        }

        public boolean equals(getPrice_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPrice_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPrice_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPrice_resultStandardSchemeFactory implements SchemeFactory {
            public getPrice_resultStandardScheme getScheme() {
                return new getPrice_resultStandardScheme();
            }
        }

        private static class getPrice_resultStandardScheme extends StandardScheme<getPrice_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPrice_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                                struct.success = iprot.readDouble();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPrice_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeDouble(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPrice_resultTupleSchemeFactory implements SchemeFactory {
            public getPrice_resultTupleScheme getScheme() {
                return new getPrice_resultTupleScheme();
            }
        }

        private static class getPrice_resultTupleScheme extends TupleScheme<getPrice_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPrice_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeDouble(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPrice_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readDouble();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getPriceFor_args implements org.apache.thrift.TBase<getPriceFor_args, getPriceFor_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPriceFor_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceFor_args");

        private static final org.apache.thrift.protocol.TField ARTICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("article", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getPriceFor_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPriceFor_argsTupleSchemeFactory());
        }

        public String article; // required
        public int amount; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ARTICLE((short)1, "article"),
            AMOUNT((short)2, "amount");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ARTICLE
                        return ARTICLE;
                    case 2: // AMOUNT
                        return AMOUNT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __AMOUNT_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ARTICLE, new org.apache.thrift.meta_data.FieldMetaData("article", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceFor_args.class, metaDataMap);
        }

        public getPriceFor_args() {
        }

        public getPriceFor_args(
                String article,
                int amount)
        {
            this();
            this.article = article;
            this.amount = amount;
            setAmountIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPriceFor_args(getPriceFor_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetArticle()) {
                this.article = other.article;
            }
            this.amount = other.amount;
        }

        public getPriceFor_args deepCopy() {
            return new getPriceFor_args(this);
        }

        @Override
        public void clear() {
            this.article = null;
            setAmountIsSet(false);
            this.amount = 0;
        }

        public String getArticle() {
            return this.article;
        }

        public getPriceFor_args setArticle(String article) {
            this.article = article;
            return this;
        }

        public void unsetArticle() {
            this.article = null;
        }

        /** Returns true if field article is set (has been assigned a value) and false otherwise */
        public boolean isSetArticle() {
            return this.article != null;
        }

        public void setArticleIsSet(boolean value) {
            if (!value) {
                this.article = null;
            }
        }

        public int getAmount() {
            return this.amount;
        }

        public getPriceFor_args setAmount(int amount) {
            this.amount = amount;
            setAmountIsSet(true);
            return this;
        }

        public void unsetAmount() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
        }

        /** Returns true if field amount is set (has been assigned a value) and false otherwise */
        public boolean isSetAmount() {
            return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
        }

        public void setAmountIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case ARTICLE:
                    if (value == null) {
                        unsetArticle();
                    } else {
                        setArticle((String)value);
                    }
                    break;

                case AMOUNT:
                    if (value == null) {
                        unsetAmount();
                    } else {
                        setAmount((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case ARTICLE:
                    return getArticle();

                case AMOUNT:
                    return getAmount();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case ARTICLE:
                    return isSetArticle();
                case AMOUNT:
                    return isSetAmount();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPriceFor_args)
                return this.equals((getPriceFor_args)that);
            return false;
        }

        public boolean equals(getPriceFor_args that) {
            if (that == null)
                return false;

            boolean this_present_article = true && this.isSetArticle();
            boolean that_present_article = true && that.isSetArticle();
            if (this_present_article || that_present_article) {
                if (!(this_present_article && that_present_article))
                    return false;
                if (!this.article.equals(that.article))
                    return false;
            }

            boolean this_present_amount = true;
            boolean that_present_amount = true;
            if (this_present_amount || that_present_amount) {
                if (!(this_present_amount && that_present_amount))
                    return false;
                if (this.amount != that.amount)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_article = true && (isSetArticle());
            list.add(present_article);
            if (present_article)
                list.add(article);

            boolean present_amount = true;
            list.add(present_amount);
            if (present_amount)
                list.add(amount);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPriceFor_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetArticle()).compareTo(other.isSetArticle());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetArticle()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.article, other.article);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAmount()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPriceFor_args(");
            boolean first = true;

            sb.append("article:");
            if (this.article == null) {
                sb.append("null");
            } else {
                sb.append(this.article);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("amount:");
            sb.append(this.amount);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPriceFor_argsStandardSchemeFactory implements SchemeFactory {
            public getPriceFor_argsStandardScheme getScheme() {
                return new getPriceFor_argsStandardScheme();
            }
        }

        private static class getPriceFor_argsStandardScheme extends StandardScheme<getPriceFor_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceFor_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ARTICLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.article = iprot.readString();
                                struct.setArticleIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // AMOUNT
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.amount = iprot.readI32();
                                struct.setAmountIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceFor_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.article != null) {
                    oprot.writeFieldBegin(ARTICLE_FIELD_DESC);
                    oprot.writeString(struct.article);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
                oprot.writeI32(struct.amount);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPriceFor_argsTupleSchemeFactory implements SchemeFactory {
            public getPriceFor_argsTupleScheme getScheme() {
                return new getPriceFor_argsTupleScheme();
            }
        }

        private static class getPriceFor_argsTupleScheme extends TupleScheme<getPriceFor_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPriceFor_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetArticle()) {
                    optionals.set(0);
                }
                if (struct.isSetAmount()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetArticle()) {
                    oprot.writeString(struct.article);
                }
                if (struct.isSetAmount()) {
                    oprot.writeI32(struct.amount);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPriceFor_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.article = iprot.readString();
                    struct.setArticleIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.amount = iprot.readI32();
                    struct.setAmountIsSet(true);
                }
            }
        }

    }

    public static class getPriceFor_result implements org.apache.thrift.TBase<getPriceFor_result, getPriceFor_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPriceFor_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPriceFor_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getPriceFor_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPriceFor_resultTupleSchemeFactory());
        }

        public double success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPriceFor_result.class, metaDataMap);
        }

        public getPriceFor_result() {
        }

        public getPriceFor_result(
                double success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPriceFor_result(getPriceFor_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public getPriceFor_result deepCopy() {
            return new getPriceFor_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0.0;
        }

        public double getSuccess() {
            return this.success;
        }

        public getPriceFor_result setSuccess(double success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Double)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPriceFor_result)
                return this.equals((getPriceFor_result)that);
            return false;
        }

        public boolean equals(getPriceFor_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPriceFor_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPriceFor_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPriceFor_resultStandardSchemeFactory implements SchemeFactory {
            public getPriceFor_resultStandardScheme getScheme() {
                return new getPriceFor_resultStandardScheme();
            }
        }

        private static class getPriceFor_resultStandardScheme extends StandardScheme<getPriceFor_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPriceFor_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                                struct.success = iprot.readDouble();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPriceFor_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeDouble(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPriceFor_resultTupleSchemeFactory implements SchemeFactory {
            public getPriceFor_resultTupleScheme getScheme() {
                return new getPriceFor_resultTupleScheme();
            }
        }

        private static class getPriceFor_resultTupleScheme extends TupleScheme<getPriceFor_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPriceFor_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeDouble(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPriceFor_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readDouble();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getOrders_args implements org.apache.thrift.TBase<getOrders_args, getOrders_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrders_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrders_args");

        private static final org.apache.thrift.protocol.TField COSTUMER_FIELD_DESC = new org.apache.thrift.protocol.TField("costumer", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getOrders_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getOrders_argsTupleSchemeFactory());
        }

        public String costumer; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COSTUMER((short)1, "costumer");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COSTUMER
                        return COSTUMER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COSTUMER, new org.apache.thrift.meta_data.FieldMetaData("costumer", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrders_args.class, metaDataMap);
        }

        public getOrders_args() {
        }

        public getOrders_args(
                String costumer)
        {
            this();
            this.costumer = costumer;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getOrders_args(getOrders_args other) {
            if (other.isSetCostumer()) {
                this.costumer = other.costumer;
            }
        }

        public getOrders_args deepCopy() {
            return new getOrders_args(this);
        }

        @Override
        public void clear() {
            this.costumer = null;
        }

        public String getCostumer() {
            return this.costumer;
        }

        public getOrders_args setCostumer(String costumer) {
            this.costumer = costumer;
            return this;
        }

        public void unsetCostumer() {
            this.costumer = null;
        }

        /** Returns true if field costumer is set (has been assigned a value) and false otherwise */
        public boolean isSetCostumer() {
            return this.costumer != null;
        }

        public void setCostumerIsSet(boolean value) {
            if (!value) {
                this.costumer = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case COSTUMER:
                    if (value == null) {
                        unsetCostumer();
                    } else {
                        setCostumer((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case COSTUMER:
                    return getCostumer();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case COSTUMER:
                    return isSetCostumer();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getOrders_args)
                return this.equals((getOrders_args)that);
            return false;
        }

        public boolean equals(getOrders_args that) {
            if (that == null)
                return false;

            boolean this_present_costumer = true && this.isSetCostumer();
            boolean that_present_costumer = true && that.isSetCostumer();
            if (this_present_costumer || that_present_costumer) {
                if (!(this_present_costumer && that_present_costumer))
                    return false;
                if (!this.costumer.equals(that.costumer))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_costumer = true && (isSetCostumer());
            list.add(present_costumer);
            if (present_costumer)
                list.add(costumer);

            return list.hashCode();
        }

        @Override
        public int compareTo(getOrders_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCostumer()).compareTo(other.isSetCostumer());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCostumer()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costumer, other.costumer);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getOrders_args(");
            boolean first = true;

            sb.append("costumer:");
            if (this.costumer == null) {
                sb.append("null");
            } else {
                sb.append(this.costumer);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getOrders_argsStandardSchemeFactory implements SchemeFactory {
            public getOrders_argsStandardScheme getScheme() {
                return new getOrders_argsStandardScheme();
            }
        }

        private static class getOrders_argsStandardScheme extends StandardScheme<getOrders_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getOrders_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COSTUMER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.costumer = iprot.readString();
                                struct.setCostumerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getOrders_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.costumer != null) {
                    oprot.writeFieldBegin(COSTUMER_FIELD_DESC);
                    oprot.writeString(struct.costumer);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getOrders_argsTupleSchemeFactory implements SchemeFactory {
            public getOrders_argsTupleScheme getScheme() {
                return new getOrders_argsTupleScheme();
            }
        }

        private static class getOrders_argsTupleScheme extends TupleScheme<getOrders_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getOrders_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCostumer()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCostumer()) {
                    oprot.writeString(struct.costumer);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getOrders_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.costumer = iprot.readString();
                    struct.setCostumerIsSet(true);
                }
            }
        }

    }

    public static class getOrders_result implements org.apache.thrift.TBase<getOrders_result, getOrders_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrders_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrders_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getOrders_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getOrders_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrders_result.class, metaDataMap);
        }

        public getOrders_result() {
        }

        public getOrders_result(
                List<String> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getOrders_result(getOrders_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>(other.success);
                this.success = __this__success;
            }
        }

        public getOrders_result deepCopy() {
            return new getOrders_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public getOrders_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<String>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getOrders_result)
                return this.equals((getOrders_result)that);
            return false;
        }

        public boolean equals(getOrders_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getOrders_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getOrders_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getOrders_resultStandardSchemeFactory implements SchemeFactory {
            public getOrders_resultStandardScheme getScheme() {
                return new getOrders_resultStandardScheme();
            }
        }

        private static class getOrders_resultStandardScheme extends StandardScheme<getOrders_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getOrders_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new ArrayList<String>(_list0.size);
                                    String _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                                    {
                                        _elem1 = iprot.readString();
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getOrders_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter3 : struct.success)
                        {
                            oprot.writeString(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getOrders_resultTupleSchemeFactory implements SchemeFactory {
            public getOrders_resultTupleScheme getScheme() {
                return new getOrders_resultTupleScheme();
            }
        }

        private static class getOrders_resultTupleScheme extends TupleScheme<getOrders_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getOrders_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter4 : struct.success)
                        {
                            oprot.writeString(_iter4);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getOrders_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list5.size);
                        String _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                        {
                            _elem6 = iprot.readString();
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
